// Generated by LiveScript 1.3.1
(function(){
  "use strict";
  var fs, path, request, async, post, argv, option, files, jsonStr, e, config, key, server;
  fs = require('fs');
  path = require('path');
  request = require('request');
  async = require('async');
  post = require('./post');
  argv = process.argv;
  option = argv[2];
  files = argv.slice(3);
  try {
    jsonStr = fs.readFileSync('config.json');
  } catch (e$) {
    e = e$;
    exit('config.json not found.');
  }
  try {
    config = JSON.parse(jsonStr);
  } catch (e$) {
    e = e$;
    exit('bad config.json.');
  }
  key = config.key;
  server = 'http://' + config.server;
  key || exit('no key.');
  server || exit('no server.');
  switch (option) {
  case 'fetch':
    fetch();
    break;
  case 'push':
    push();
    break;
  default:
    exit('nothing done.');
  }
  function push(){
    var posts, tasks;
    posts = [];
    tasks = [];
    files.length || exit('no posts to push.');
    files.forEach(function(file){
      tasks.push(function(cb){
        fs.readFile(file, {
          encoding: 'utf-8'
        }, function(err, fileContent){
          var postObject;
          if (err) {
            cb(err);
          } else {
            postObject = post.decode(fileContent);
            posts.push(postObject);
            cb();
          }
        });
      });
    });
    async.parallel(tasks, function(err){
      if (err) {
        exit(err);
      } else {
        request({
          url: server + '/s-push-posts',
          method: 'POST',
          body: {
            key: key,
            posts: posts
          },
          json: true
        }, function(err, res, body){
          if (err) {
            exit(err);
          } else {
            if (res.statusCode === 200) {
              ok();
            } else {
              ops();
            }
          }
        });
      }
    });
  }
  function fetch(){
    request({
      url: server + '/s-fetch-posts',
      method: 'POST',
      body: {
        key: key
      },
      json: true
    }, function(err, res, body){
      var e, posts, tasks;
      if (err) {
        exit(err);
      } else {
        try {
          fs.mkdirSync('posts');
        } catch (e$) {
          e = e$;
          'pass';
        }
        posts = body;
        tasks = [];
        posts.forEach(function(postObject){
          tasks.push(function(cb){
            var postStr;
            postStr = post.encode(postObject);
            fs.writeFile(path.join('posts', postObject.title + '.md'), postStr, {
              encoding: 'utf-8'
            }, function(err){
              cb(err);
            });
          });
        });
        async.parallel(tasks, function(err){
          !!err == null && exit({
            err: ok()
          });
        });
      }
    });
  }
  function log(msg){
    console.log(msg);
  }
  function exit(msg){
    log(msg);
    process.exit(1);
  }
  function ok(){
    exit('ok.');
  }
  function ops(){
    exit('oooooooops!');
  }
}).call(this);
